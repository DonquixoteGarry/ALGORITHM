/*
盖尔 - 沙普利(Gale - Shapley)稳定匹配算法

1.
首先，男生需要按照希望与之交往的顺序给所有女生排序，
即最理想的女友排在最前、最不理想的放在最后。
同样，每个女生也需要给男生排序。

2.
接着，男生将按照自己的名单一轮一轮地去追求喜欢的女生，女生也将按照自己的名单接受或拒绝对方
第一轮，每个男生都向自己名单上排在首位的女生表白
此时，一个女生可能面对的情况有三种：
向她表白人数=0   ——这个女生什么都不做，继续等待即可
向她表白人数=1   ——女生接受当前这人的表白，暂时和他交往
向她表白人数>1   ——女生从所有追求者包括现男友中选择自己最喜欢的那一位，暂时和他交往，并拒绝其他人
第一轮结束后，有些男生已经有女朋友了而有些男生仍然是单身
在第二轮表白行动中，每个单身男都会从所有还没拒绝过自己的女生中选出自己最喜欢的那一个，并向她表白，不管她现在是否是单身

3.
在以后的每一轮中，皆重复上述步骤
这样一轮一轮地进行下去，直到某个时刻所有人都不再单身
每个人的对象也都将固定下来，此时的搭配就一定是稳定的
*/




#include<iostream>
using namespace std;

int* man_goal;
//an index to point which woman to call(according to the favlist, 1 initially ) 
int** mfav, ** wfav;
//man(woman)'s favorite list
int* man_find;
//which woman this man got,0 is none

void init(int size)
{
	int fav_one;
	man_goal = new int[size + 1];
	man_find = new int[size + 1];
	for (int s = 1; s <= size; s++)man_goal[s] = 1;
	for (int k = 1; k <= size; k++)man_find[k] = 0;
	mfav = new int* [size + 1];
	wfav = new int* [size + 1];
	for (int i = 1; i <= size; i++)mfav[i] = new int[size + 1];
	for (int j = 1; j <= size; j++)wfav[j] = new int[size + 1];
	for (int n = 1; n <= size; n++)
	{
		for (int m = 1; m <= size; m++)
		{
			cin >> fav_one;
			mfav[n][m] = fav_one;
		}
	}
	for (int n = 1; n <= size; n++)
	{
		for (int m = 1; m <= size; m++)
		{
			cin >> fav_one;
			wfav[n][m] = fav_one;
		}
	}
}

bool check(int _size)
{//check whether all people married
	for (int a = 1; a <= _size; a++)
	{
		if (man_find[a] == 0)return false;
	}
	return true;
}

int find_hus(int wno, int _size)
{//find one's husband,none is 0
 //wno means woman_number
	for (int a = 1; a <= _size; a++)
	{
		if (man_find[a] == wno)return a;
	}
	return 0;
}

bool compareLove(int wno, int old_hus, int new_hus, int _size)
{//old_hus yes => true
 //new_hus yes => false
	for (int a = 1; a <= _size; a++)
	{
		if (wfav[wno][a] == old_hus)return true;
		if (wfav[wno][a] == new_hus)return false;
	}
	return true;
}

void couple_change(int wno, int newmno, int _size)
{//compare and decide change husband or not
	if (find_hus(wno, _size) == 0)
	{
		man_find[newmno] = wno;
		//cout << "GIRL." << wno << " first choose BOY." << newmno<<endl;
	}
	else
	{
		int old_hus = find_hus(wno, _size);
		for (int kk = 1; kk <= _size; kk++)
		{
			if (compareLove(wno, old_hus, newmno, _size) == true)
			{
				//cout << "GIRL." << wno << " refuse BOY." << newmno;
				//cout << ",stay BOY." << old_hus << endl;
				man_goal[newmno]++;
				return;
			}
			else
			{
				//cout << "GIRL." << wno << " choose BOY." << newmno;
				//cout << ",kick BOY." << old_hus << endl;
				man_goal[old_hus]++;
				man_find[old_hus] = 0;
				man_find[newmno] = wno;
				return;
			}
		}
	}
}

void show(int size)
{
	//cout << "couplelist:";
	for (int ss = 1; ss <= size; ss++)
	{
		cout << man_find[ss] << " ";
	}
	//system("pause>nul");
}

int main()
{
	int size;
	cin >> size;
	init(size);
	int times=1;
	while (check(size) != true)
	{

		//cout << "----------ROUND." << times<<"----------"<<endl;
		for (int no = 1; no <= size; no++)
		{
			if ((man_goal[no] != size + 1)&&(man_find[no]==0))couple_change(mfav[no][man_goal[no]], no, size);
			//system("pause>nul");
		}
		times++;
	}
	cout << endl;
	show(size);
	return 0;
}
