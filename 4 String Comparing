/*

对于长度相同的2个字符串A和B，其距离定义为相应位置字符距离之和
2个非空格字符的距离是它们的ASCII码之差的绝对值,空格与空格的距离为0,空格与其它字符的距离为一定值k
在一般情况下，字符串A和B的长度不一定相同
字符串A的扩展是在A中插入若干空格字符所产生的字符串
在字符串A和B的所有长度相同的扩展中,有一对距离最小的扩展，该距离称为字符串A和B的扩展距离 

任务： 
对于给定的字符串A和B，编程计算其扩展距离
 
数据输入： 
第1行是字符串A；(长度<2000) 
第2行是字符串B。(长度<2000) 
第3行是空格与其它字符的距离定值(0<k<=10) 

结果输出: 
将计算出的字符串A和B的扩展距离输出 

Example:

Input: 
cmc 
snmn 
2

Output: 
10


*/




#include <iostream>
#include <cmath>
#include <string>
using namespace std;
#define min(a,b,c) a<b?(a<c?a:c):(b<c?b:c) 
#define MAXNUM 10000
int k, a_len, b_len;
string a, b;
int** matrix;

int cmp(char a, char b)
{
	if((a == ' ' && b != ' ') || (a != ' ' && b == ' ')) return k;
	return fabs(int(a) - int(b));
}
void init()
{
	getline(cin,a);
	getline(cin,b);
	cin>>k;
	char c[2] = " ";
	a = " " + a;
	b = " " + b;
	a_len = a.length();
	b_len = b.length();
}

int solve()
{
	//cout <<"字符a:"<< a<<"\na_len= " <<a_len<<",\n" <<"字符b:" <<b<<"\nb_len= "<< b_len <<"\nk="<<k<< endl;
	int dis1, dis2, dis3;
	matrix = new int* [a_len+1];
	for (int i = 0; i <= a_len; i++)matrix[i] = new int[b_len+1];
	for (int i = 0; i <= a_len; i++)
	{
		for (int j = 0; j <=b_len; j++)
		{
			matrix[i][j] = MAXNUM;
			if ((i>0)&&(j>0))
			{
				dis1 = matrix[i - 1][j] + k;
				dis2 = matrix[i][j - 1] + k;
				dis3 = matrix[i - 1][j - 1] + cmp(a[i], b[j]);
				int min = min(dis1, dis2, dis3);
				matrix[i][j] =matrix[i][j]<min? matrix[i][j]:min;
			}
			else if ((i > 0) && (j == 0))
			{
				matrix[i][j] = matrix[i][j] < (matrix[i - 1][j] + k) ? matrix[i][j] : (matrix[i - 1][j] + k);
			}
			else if ((i == 0) && (j > 0))
			{

				matrix[i][j] = matrix[i][j] < (matrix[i][j - 1] + k) ? matrix[i][j] : (matrix[i][j - 1] + k);
			}
			else matrix[i][j] = 0;
			//cout << "matrix["<<i<<"]["<<j<<"]=" << matrix[i][j] << endl;
		}
	}
	int value = matrix[a_len][b_len];
	/*for (int i = 0; i < a_len; i++)
	{
		for (int j = 0; j < b_len; j++)
		{
			cout << matrix[i][j] << " ";
		}
		cout << endl;
	}*/
	delete[] matrix;
	return value;
}

int main()
{
	init();
	int ans = solve();
	cout <<ans;
}



















